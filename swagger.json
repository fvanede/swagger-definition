{
    "swagger": "2.0",
    "info": {
        "version": "0.4.2 - 2015-10-07",
        "title": "HC Favorites App RESTFul web service.",
        "description": "The HC Favorites App web service will return responses in the 200 range when the requests can be handled successfully by the backend system. An error in the 400 range will occur if the service or if the backend system detect a functional error. An error in the 500 range will mean that there is an infrastructural problem within the HC backend server landscape."
    },
    "paths": {
        "/users": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Register / Login",
                "description": "Register a new user and/or login an existing user. When the user is a Favorites Card holder the following fields are mandatory; [pers_id, guest/birthdate, guest/email_address, guest/email_opt_in]. If the users' app_id is available it may be supplied, indicating the user has registered before as an Favorites App user. If the user is not a Favorites Card user yet, the following fields are mandatory; [guest / [initials, surname, birh_date, gender, email_address, email_opt_in]]. The surname prefix (e.g. van, van de, van 't, op 't) is not mandatory. The common fields that are mandatory for both Favorites Card holders and non-Favorites Card holders are; [ birth_date, email_address, email_opt_in ].",
                "operationId": "RequestRegisterFavAppUser",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "credentials",
                        "description": "User object that needs to be added to the backend CRM system",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/credentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation - user is known and returned (no need to create again). Although the 'user' object has room for 'guest', 'card', 'loyalty' and 'preferences' information, only the information contained in 'user_reference' and 'pers_id' will be returned.",
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    },
                    "201": {
                        "description": "User created. Although the 'user' object has room for 'guest', 'card', 'loyalty' and 'preferences' information, only the information contained in 'user_reference' and 'pers_id' will be returned.",
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Unprocessible entity - the request is valid, but the syntax is incorrect"
                    }
                }
            }
        },
        "/users/{app_id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get user's account and loyalty data",
                "description": "Returns loyalty data and other account information of the user with ID {app_id}",
                "operationId": "RequestFavGuestData",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "app_id",
                        "description": "App ID of user that needs to be fetched",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. Although the 'preferences' block is available in a 'user' object, it will not be returned in this call. You should use the 'all_data' operation or use the 'preferences' service.",
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    },
                    "400": {
                        "description": "Bad request content"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/users/{app_id}/all_data": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get all the user's data",
                "description": "Get all the user's data including preferences, loyalty points, user data etc.",
                "operationId": "RequestGetFavAppAllData",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "app_id",
                        "description": "App ID of user that needs to be fetched",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    },
                    "400": {
                        "description": "Bad request content"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/preferences": {
            "get": {
                "tags": [
                    "preferences"
                ],
                "summary": "Get all possible preference values",
                "description": "Retrieves account preferences of the the user with {app_id}. Each preference is a list of values. If the value is present in the list, the user has this preference (it is 'true'). IMPORTANT - The preferences the user does not have (the ones that are 'false') are not contained in the output!",
                "operationId": "RequestGetAllPossiblePreferences",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/preferences"
                        }
                    },
                    "404": {
                        "description": "No preferences found"
                    }
                }
            }
        },
        "/preferences/{app_id}": {
            "get": {
                "tags": [
                    "preferences"
                ],
                "summary": "Get user preferences",
                "description": "Retrieves account preferences of the the user with {app_id}. The output is a list of preference objects. If the value is present in the list, the user has this preference (it is 'true'). IMPORTANT - The preferences the user does not have (the ones that are 'false') are not contained in the output!",
                "operationId": "RequestGetFavAppPreferenceData",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "app_id",
                        "description": "App ID of user that needs to be fetched",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/user_preferences"
                        }
                    },
                    "400": {
                        "description": "Bad request content"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "preferences"
                ],
                "summary": "Update user preferences",
                "description": "Updates the account preferences of the the user with {app_id}. A preference is an object with 3 properties: a \"category\" the preference belongs to, a \"code\" (like the key in a key/value pair) and a \"description\" (like the value of a key/value pair) list of values. If the object is present in the list, the user has this preference (it is \"true\"). IMPORTANT - Only specify the preferences that apply to the user (those that are \"true\") and leave out any preference that do not apply (those that are \"false\").",
                "operationId": "RequestUpdateFavAppPreferenceData",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "app_id",
                        "description": "App ID of user that needs to be fetched",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "preferences",
                        "description": "User object that needs to be added to the backend CRM system",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/preferences"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request content"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/jackpot_values": {
            "get": {
                "tags": [
                    "jackpot_values"
                ],
                "summary": "Retrieve all JackPot values",
                "description": "Returns the Jackpot values of all HC locations",
                "operationId": "RequestGetProgressiveJPValues(ALL)",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/jackpot_values"
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/jackpot_values/{site_code}": {
            "get": {
                "tags": [
                    "jackpot_values"
                ],
                "summary": "Retrieve location JackPot values",
                "description": "Returns a list with one site (from {site_code} obviously. Of this site, a list of Jackpot values is returned.",
                "operationId": "RequestGetProgressiveJPValues(siteCode)",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "site_code",
                        "description": "Site code of the casino",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. Jackpot values for site {site_code} are returned.",
                        "schema": {
                            "$ref": "#/definitions/jackpot_values"
                        }
                    },
                    "400": {
                        "description": "Bad request content"
                    },
                    "404": {
                        "description": "Site code not found"
                    }
                }
            }
        },
        "/campaigns/{app_id}": {
            "get": {
                "tags": [
                    "campaigns"
                ],
                "summary": "Get campaigns for user",
                "description": "Retrieve marketing campaigns that apply to user with ID {app_id}",
                "operationId": "RequestGetCampaignDataByFavAppId",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "app_id",
                        "description": "App ID of the user",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/campaigns"
                        }
                    },
                    "400": {
                        "description": "Bad request content"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        }
    },
    "definitions": {
        "credentials": {
            "properties": {
                "app_id": {
                    "type": "string",
                    "description": "Unique ID representing a specific Favorites App user"
                },
                "pers_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "When the user is registered as card holder in the HC CRM system, this ID is known. If pers_id is not known, the user is a prospect to become a Favorites Card user."
                },
                "guest": {
                    "$ref": "#/definitions/guest"
                }
            }
        },
        "guest": {
            "required": [
                "birth_date",
                "email_address",
                "email_opt_in"
            ],
            "properties": {
                "initials": {
                    "type": "string",
                    "description": "Initials of the user",
                    "maxLength": 12
                },
                "surname_prefix": {
                    "type": "string",
                    "description": "Holds the user's preposition if applicable (e.g. van, van der, von, de, 't, van 't)",
                    "maxLength": 8
                },
                "surname": {
                    "type": "string",
                    "description": "The user's family name or last name",
                    "maxLength": 80
                },
                "birth_date": {
                    "type": "string",
                    "format": "date",
                    "description": "The user's date of birth"
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "Male",
                        "Female"
                    ],
                    "description": "The user's gender"
                },
                "email_address": {
                    "type": "string",
                    "description": "The user's preferred E-mail address",
                    "maxLength": 255
                },
                "email_opt_in": {
                    "type": "boolean",
                    "description": "The user can accept e-mails from HC (true) or decline mails (false)"
                }
            }
        },
        "user": {
            "required": [
                "user_reference",
                "pers_id"
            ],
            "properties": {
                "user_reference": {
                    "$ref": "#/definitions/user_reference"
                },
                "pers_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "When the user is registered as card holder in the HC CRM system, this ID is known. If pers_id is not known, the user is a prospect to become a Favorites Card user."
                },
                "guest": {
                    "$ref": "#/definitions/guest"
                },
                "card": {
                    "$ref": "#/definitions/card"
                },
                "loyalty": {
                    "$ref": "#/definitions/loyalty"
                },
                "preferences": {
                    "$ref": "#/definitions/preferences",
                    "description": "User preferences sorted per category"
                }
            }
        },
        "user_reference": {
            "required": [
                "app_id",
                "is_promotable"
            ],
            "properties": {
                "app_id": {
                    "type": "string",
                    "description": "Unique ID representing a specific Favorites App user"
                },
                "is_promotable": {
                    "type": "boolean",
                    "description": "Indicates if the user may visit a HC location or is on the blacklist (banned temporarily or permanent)"
                }
            }
        },
        "card": {
            "required": [
                "card_nr",
                "expiry_date"
            ],
            "properties": {
                "card_nr": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The ID of the Favorites Card"
                },
                "expiry_date": {
                    "type": "string",
                    "format": "date",
                    "description": "The expiry date of the Favorites Card"
                }
            }
        },
        "loyalty": {
            "required": [
                "account_nr",
                "points",
                "current_segment"
            ],
            "properties": {
                "account_nr": {
                    "type": "integer",
                    "format": "int64"
                },
                "points": {
                    "type": "integer",
                    "format": "int64"
                },
                "current_segment": {
                    "properties": {
                        "code": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The code of the user's current loyalty segment"
                        },
                        "value": {
                            "type": "string",
                            "description": "Description of the users's current loyalty segment (e.g. Black Favorites Card)"
                        }
                    }
                },
                "next_segment": {
                    "properties": {
                        "code": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The code of the next loyalty segment the user can reach"
                        },
                        "value": {
                            "type": "string",
                            "description": "Description of loyalty segment the user can reach"
                        },
                        "remaining_visits": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The number of visits the user needs to reach the next loyalty segment"
                        },
                        "remaining_visits_expiry_date": {
                            "type": "string",
                            "format": "date",
                            "description": "Remaining visits need to be done before expiry date"
                        }
                    }
                }
            }
        },
        "user_preferences": {
            "properties": {
                "user_reference": {
                    "$ref": "#/definitions/user_reference"
                },
                "preferences": {
                    "$ref": "#/definitions/preferences"
                }
            }
        },
        "preferences": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/preference",
                "description": "A list of preference objects. See object definition for more details"
            }
        },
        "preference": {
            "required": [
                "code"
            ],
            "properties": {
                "category": {
                    "type": "string",
                    "description": "The name of the category e.g. \"Spelen\" (games) and \"Vestigingen\" (locations)"
                },
                "description": {
                    "type": "string",
                    "description": "The preference property value e.g. \"Tafelspelen\" (table games) and \"Amsterdam\", like the \"value\" in a key/value pair."
                },
                "code": {
                    "type": "string",
                    "description": "The preference property code, like \"key\" in a key/value pair. E.g. \"gam_tasp\" as code for the game category \"Tafelpelen\". The \"code\" property is mandatory when updating the user preferences."
                }
            }
        },
        "jackpot_values": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/jackpot_value_for_site"
            },
            "description": "One site or a list of sites with a list of jackpot values per site."
        },
        "jackpot_value_for_site": {
            "properties": {
                "site_code": {
                    "type": "string",
                    "description": "The code of the HC location (e.g. AMS for Amsterdam)"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/value"
                    }
                }
            },
            "description": "List of Jackpot value objects for a particular site"
        },
        "value": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the game (e.g. ZVT IGT Poke, Hot Shot)"
                },
                "levels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/level"
                    }
                }
            }
        },
        "level": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the level (e.g. Level 0)"
                },
                "amount": {
                    "type": "number",
                    "description": "The value of the Progressive Jackpot"
                }
            }
        },
        "campaigns": {
            "properties": {
                "user_reference": {
                    "$ref": "#/definitions/user_reference"
                },
                "campaigns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/campaign"
                    }
                }
            }
        },
        "campaign": {
            "required": [
                "code",
                "name"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Internal code of the marketing campaign"
                },
                "name": {
                    "type": "string",
                    "description": "Description of the marketing campaign"
                },
                "description": {
                    "type": "string",
                    "description": "Textual description of the marketing campaign"
                },
                "image_type": {
                    "type": "string",
                    "description": "Reference to a picture that could be shown to the user"
                },
                "start_date": {
                    "type": "string",
                    "format": "date",
                    "description": "Start date of the campaign"
                },
                "end_date": {
                    "type": "string",
                    "format": "date",
                    "description": "End date of the campaign"
                }
            }
        }
    }
}